# -*- coding: utf-8 -*-
"""Customer_Behavior_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RaXOjBgf8dIrsb7dWxyMRRB_RU_JYJfj
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
csv_url = '/Users/akhilarekatika/Work/Spring 2024/AIT 622/Womens Clothing E-Commerce Reviews.csv'
df = pd.read_csv(csv_url)
df

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Group by age groups and calculate preferences for class names
age_class_preferences = df.groupby('Age')['Class Name'].agg(lambda x: x.value_counts().index[0]).reset_index()

# Plotting preferences for class names by age group using a bar plot
plt.figure(figsize=(12, 8))
sns.barplot(data=age_class_preferences, x='Age', y='Class Name', palette='viridis')
plt.title('Age Group Preferences for Class Names')
plt.xlabel('Age Group')
plt.ylabel('Preferred Class Name')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Group by age groups and calculate preferences for class names
age_class_preferences = df.groupby('Age')['Department Name'].agg(lambda x: x.value_counts().index[0]).reset_index()

# Plotting preferences for class names by age group using a box plot
plt.figure(figsize=(12, 8))
sns.boxplot(data=age_class_preferences, x='Department Name', y='Age', palette='viridis')
plt.title('Age Group Preferences for Department Names')
plt.xlabel('Preferred Department Name')
plt.ylabel('Age Group')
plt.tight_layout()
plt.show()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Drop rows with missing 'Review Text'
df.dropna(subset=['Review Text'], inplace=True)

# Convert sentiment into binary classification (recommended or not)
df['Recommended'] = df['Recommended IND']

# Select features (independent variables) and target variable
X = df['Review Text']
y = df['Recommended']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Convert text data into TF-IDF vectors
tfidf_vectorizer = TfidfVectorizer(max_features=1000, stop_words='english')
X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
X_test_tfidf = tfidf_vectorizer.transform(X_test)

# Initialize and fit logistic regression model
model = LogisticRegression()
model.fit(X_train_tfidf, y_train)

# Predict recommendation on the test set
y_pred = model.predict(X_test_tfidf)

# Calculate accuracy score
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Extracting feature names (words) from TF-IDF vectorizer
feature_names = tfidf_vectorizer.get_feature_names_out()

# Getting coefficients associated with each feature
coefficients = model.coef_[0]

# Combine feature names and coefficients into a DataFrame
feature_coefficients_df = pd.DataFrame({'Feature': feature_names, 'Coefficient': coefficients})

# Sorting the DataFrame by coefficient values to identify important features
important_features = feature_coefficients_df.sort_values(by='Coefficient', ascending=False).head(10)
print("Top 10 important features:")
print(important_features)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud


# Drop rows with missing 'Review Text'
df.dropna(subset=['Review Text'], inplace=True)

# Define function to extract sentiment from ratings
def get_sentiment(rating):
    if rating >= 4:
        return 'Positive'
    else:
        return 'Negative'

# Apply sentiment function to create a new column
df['Sentiment'] = df['Rating'].apply(get_sentiment)

# Plot distribution of sentiments
plt.figure(figsize=(8, 6))
sns.countplot(data=df, x='Sentiment', palette='Set2')
plt.title('Distribution of Sentiments')
plt.xlabel('Sentiment')
plt.ylabel('Count')
plt.show()

# Visualize the most common words associated with positive sentiment
positive_reviews = ' '.join(df[df['Sentiment'] == 'Positive']['Review Text'].tolist())
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(positive_reviews)

plt.figure(figsize=(10, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.title('Word Cloud for Positive Sentiment')
plt.axis('off')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from scipy.interpolate import make_interp_spline

# Assuming df is your DataFrame containing the dataset

# Group the data by age and calculate the average recommendation rate
age_recommendation = df.groupby('Age')['Recommended IND'].mean().reset_index()

# Interpolate the data for smoother curve
age_smooth = make_interp_spline(age_recommendation['Age'], age_recommendation['Recommended IND'])

# Plotting the scatter plot and the smooth line
plt.figure(figsize=(10, 6))

# Scatter plot
plt.scatter(age_recommendation['Age'], age_recommendation['Recommended IND'], label='Data')

# Smooth line
age_range = range(age_recommendation['Age'].min(), age_recommendation['Age'].max() + 1)
plt.plot(age_range, age_smooth(age_range), linestyle='-', color='red', label='Smooth Line')

plt.title('Relationship between Age and Likelihood to Recommend Products')
plt.xlabel('Age')
plt.ylabel('Recommendation Rate')
plt.xticks(range(0, age_recommendation['Age'].max() + 1, 25))  # Setting x-axis ticks
plt.legend()
plt.grid(True)  # Adding grid lines
plt.show()

import pandas as pd
import plotly.graph_objs as go

# Assuming df is your DataFrame containing the dataset

# Group the data by age and calculate the average recommendation rate
age_recommendation = df.groupby('Age')['Recommended IND'].mean().reset_index()

# Create an interactive line plot using Plotly
fig = go.Figure()

# Add the line trace
fig.add_trace(go.Scatter(x=age_recommendation['Age'], y=age_recommendation['Recommended IND'], mode='lines', name='Recommendation Rate'))

# Update layout
fig.update_layout(title='Relationship between Age and Likelihood to Recommend Products',
                  xaxis_title='Age',
                  yaxis_title='Recommendation Rate',
                  xaxis=dict(type='category'),  # Ensure x-axis treats ages as categories
                  yaxis=dict(tickformat='.2f'),  # Format y-axis ticks to two decimal places
                  template='plotly_white'  # Set plot style
                  )

# Show the interactive plot
fig.show()

import pandas as pd
import matplotlib.pyplot as plt

# Assuming df is your DataFrame containing the dataset

# Group the data by rating and calculate the average recommendation rate
rating_recommendation = df.groupby('Rating')['Recommended IND'].mean().reset_index()

# Plotting the relationship between rating and recommendation rate
plt.figure(figsize=(10, 6))
plt.plot(rating_recommendation['Rating'], rating_recommendation['Recommended IND'], marker='o', linestyle='-')
plt.title('Relationship between Rating and Likelihood to Recommend Products')
plt.xlabel('Rating')
plt.ylabel('Recommendation Rate')
plt.xticks(range(1, 6))  # Setting x-axis ticks to range from 1 to 5
plt.yticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])  # Setting y-axis ticks
plt.grid(True)  # Adding grid lines
plt.show()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Assuming df is your DataFrame containing the dataset
# Selecting relevant features for the logistic regression model
X = df[['Rating', 'Age']]
y = df['Recommended IND']

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and fit logistic regression model
logistic_model = LogisticRegression()
logistic_model.fit(X_train, y_train)

# Making predictions on the testing set
y_pred = logistic_model.predict(X_test)

# Evaluating the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:")
print(classification_report(y_test, y_pred))

